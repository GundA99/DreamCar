{"ast":null,"code":"import axios from 'axios';\nimport { createUrl, log } from '../utils/utils';\nexport async function registerUser(firstName, lastName, address, phone, email, password, userRoles) {\n  const url = createUrl('/users/register');\n  const body = {\n    firstName,\n    lastName,\n    address,\n    phone,\n    email,\n    password,\n    userRoles\n  };\n\n  try {\n    // Check if the user already exists by email\n    try {\n      const getUserResponse = await axios.get(url);\n\n      if (getUserResponse.data && getUserResponse.data.email === email) {\n        console.log(getUserResponse.data);\n        return {\n          email: ''\n        }; // Return an empty object to indicate existing email\n      }\n\n      if (getUserResponse.data && getUserResponse.data.userRoles === 'USER') {\n        return {\n          userRoles: 'USER'\n        };\n      } else if (getUserResponse.data && getUserResponse.data.userRoles === 'ADMIN') {\n        return {\n          userRoles: 'ADMIN'\n        };\n      } else if (getUserResponse.data && getUserResponse.data.userRoles === 'SALESPERSON') {\n        return {\n          userRoles: 'SALESPERSON'\n        };\n      }\n    } catch (getUserEx) {\n      log('Error fetching user data by email:', getUserEx);\n    } // Proceed with registration if the email is not found in the database\n\n\n    const response = await axios.post(url, body);\n    log(response.data);\n    return response.data;\n  } catch (ex) {\n    log('Error registering user:', ex);\n    return null;\n  }\n}\nexport async function loginUser(email, password) {\n  const url = createUrl('/auth/signin');\n  const body = {\n    email,\n    password\n  }; // wait till axios is making the api call and getting response from server\n\n  try {\n    const response = await axios.post(url, body);\n    log(response.data);\n    const token = response.data.jwt;\n    const userRoles = response.data.userRoles;\n    const userId = response.data.userId;\n    const isLoggedIn = response.data.isLoggedIn;\n    sessionStorage.setItem(\"token\", token);\n    sessionStorage.setItem(\"userRoles\", userRoles);\n    sessionStorage.setItem(\"userId\", userId);\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}","map":{"version":3,"names":["axios","createUrl","log","registerUser","firstName","lastName","address","phone","email","password","userRoles","url","body","getUserResponse","get","data","console","getUserEx","response","post","ex","loginUser","token","jwt","userId","isLoggedIn","sessionStorage","setItem"],"sources":["C:/Users/akash/OneDrive/Desktop/MyProject/FrontEnd/Dream_Car-VMS-/Frontend/a/src/services/user.js"],"sourcesContent":["import axios from 'axios';\r\nimport { createUrl, log } from '../utils/utils';\r\n\r\nexport async function registerUser(\r\n  firstName,\r\n  lastName,\r\n  address,\r\n  phone,\r\n  email,\r\n  password,\r\n  userRoles\r\n) {\r\n  const url = createUrl('/users/register');\r\n  const body = {\r\n    firstName,\r\n    lastName,\r\n    address,\r\n    phone,\r\n    email,\r\n    password,\r\n    userRoles\r\n  };\r\n\r\n  try {\r\n    // Check if the user already exists by email\r\n    try {\r\n      const getUserResponse = await axios.get(url);\r\n      if (getUserResponse.data && getUserResponse.data.email === email) {\r\n        console.log(getUserResponse.data);\r\n        return { email: '' }; // Return an empty object to indicate existing email\r\n      }\r\n      if(getUserResponse.data && getUserResponse.data.userRoles === 'USER'){\r\n        return {userRoles : 'USER'}\r\n      }\r\n      else if (getUserResponse.data && getUserResponse.data.userRoles === 'ADMIN'){\r\n        return {userRoles : 'ADMIN'}\r\n      }\r\n      else if (getUserResponse.data && getUserResponse.data.userRoles === 'SALESPERSON'){\r\n        return {userRoles : 'SALESPERSON'}\r\n      }\r\n    } catch (getUserEx) {\r\n      log('Error fetching user data by email:', getUserEx);\r\n    }\r\n\r\n    // Proceed with registration if the email is not found in the database\r\n    const response = await axios.post(url, body);\r\n    log(response.data);\r\n    return response.data;\r\n  } catch (ex) {\r\n    log('Error registering user:', ex);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n  const url = createUrl('/auth/signin')\r\n  const body = {\r\n    email,\r\n    password,\r\n  }\r\n\r\n  // wait till axios is making the api call and getting response from server\r\n  try {\r\n    const response = await axios.post(url, body)\r\n    log(response.data)\r\n    const token = response.data.jwt;\r\n    const userRoles = response.data.userRoles;\r\n    const userId = response.data.userId;\r\n    const isLoggedIn = response.data.isLoggedIn;\r\n\r\n    sessionStorage.setItem(\"token\" , token);\r\n    sessionStorage.setItem(\"userRoles\", userRoles);\r\n    sessionStorage.setItem(\"userId\", userId);\r\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\r\n    return response.data\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}